// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atomix/protocols/log/log.proto

package atomix_protocols_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Storage level
type StorageLevel int32

const (
	StorageLevel_DISK   StorageLevel = 0
	StorageLevel_MAPPED StorageLevel = 1
)

var StorageLevel_name = map[int32]string{
	0: "DISK",
	1: "MAPPED",
}
var StorageLevel_value = map[string]int32{
	"DISK":   0,
	"MAPPED": 1,
}

func (x StorageLevel) String() string {
	return proto.EnumName(StorageLevel_name, int32(x))
}
func (StorageLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_log_876b73a911678237, []int{0}
}

// Member group strategy
type MemberGroupStrategy int32

const (
	MemberGroupStrategy_HOST_AWARE MemberGroupStrategy = 0
	MemberGroupStrategy_RACK_AWARE MemberGroupStrategy = 1
	MemberGroupStrategy_ZONE_AWARE MemberGroupStrategy = 2
)

var MemberGroupStrategy_name = map[int32]string{
	0: "HOST_AWARE",
	1: "RACK_AWARE",
	2: "ZONE_AWARE",
}
var MemberGroupStrategy_value = map[string]int32{
	"HOST_AWARE": 0,
	"RACK_AWARE": 1,
	"ZONE_AWARE": 2,
}

func (x MemberGroupStrategy) String() string {
	return proto.EnumName(MemberGroupStrategy_name, int32(x))
}
func (MemberGroupStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_log_876b73a911678237, []int{1}
}

// Log protocol configuration
type LogProtocol struct {
	MemberGroupStrategy  MemberGroupStrategy `protobuf:"varint,1,opt,name=member_group_strategy,json=memberGroupStrategy,proto3,enum=atomix.protocols.log.MemberGroupStrategy" json:"member_group_strategy,omitempty"`
	Storage              *StorageSpec        `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	Compaction           *CompactionSpec     `protobuf:"bytes,3,opt,name=compaction,proto3" json:"compaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LogProtocol) Reset()         { *m = LogProtocol{} }
func (m *LogProtocol) String() string { return proto.CompactTextString(m) }
func (*LogProtocol) ProtoMessage()    {}
func (*LogProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_876b73a911678237, []int{0}
}
func (m *LogProtocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogProtocol.Unmarshal(m, b)
}
func (m *LogProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogProtocol.Marshal(b, m, deterministic)
}
func (dst *LogProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogProtocol.Merge(dst, src)
}
func (m *LogProtocol) XXX_Size() int {
	return xxx_messageInfo_LogProtocol.Size(m)
}
func (m *LogProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_LogProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_LogProtocol proto.InternalMessageInfo

func (m *LogProtocol) GetMemberGroupStrategy() MemberGroupStrategy {
	if m != nil {
		return m.MemberGroupStrategy
	}
	return MemberGroupStrategy_HOST_AWARE
}

func (m *LogProtocol) GetStorage() *StorageSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *LogProtocol) GetCompaction() *CompactionSpec {
	if m != nil {
		return m.Compaction
	}
	return nil
}

// Partition group storage configuration
type StorageSpec struct {
	MaxEntrySize         uint32       `protobuf:"varint,1,opt,name=max_entry_size,json=maxEntrySize,proto3" json:"max_entry_size,omitempty"`
	SegmentSize          uint32       `protobuf:"varint,2,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`
	Level                StorageLevel `protobuf:"varint,3,opt,name=level,proto3,enum=atomix.protocols.log.StorageLevel" json:"level,omitempty"`
	FlushOnCommit        bool         `protobuf:"varint,4,opt,name=flush_on_commit,json=flushOnCommit,proto3" json:"flush_on_commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StorageSpec) Reset()         { *m = StorageSpec{} }
func (m *StorageSpec) String() string { return proto.CompactTextString(m) }
func (*StorageSpec) ProtoMessage()    {}
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_876b73a911678237, []int{1}
}
func (m *StorageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageSpec.Unmarshal(m, b)
}
func (m *StorageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageSpec.Marshal(b, m, deterministic)
}
func (dst *StorageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageSpec.Merge(dst, src)
}
func (m *StorageSpec) XXX_Size() int {
	return xxx_messageInfo_StorageSpec.Size(m)
}
func (m *StorageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StorageSpec proto.InternalMessageInfo

func (m *StorageSpec) GetMaxEntrySize() uint32 {
	if m != nil {
		return m.MaxEntrySize
	}
	return 0
}

func (m *StorageSpec) GetSegmentSize() uint32 {
	if m != nil {
		return m.SegmentSize
	}
	return 0
}

func (m *StorageSpec) GetLevel() StorageLevel {
	if m != nil {
		return m.Level
	}
	return StorageLevel_DISK
}

func (m *StorageSpec) GetFlushOnCommit() bool {
	if m != nil {
		return m.FlushOnCommit
	}
	return false
}

// Partition group compaction configuration
type CompactionSpec struct {
	Dynamic              bool     `protobuf:"varint,1,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	FreeDiskBuffer       float64  `protobuf:"fixed64,2,opt,name=free_disk_buffer,json=freeDiskBuffer,proto3" json:"free_disk_buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactionSpec) Reset()         { *m = CompactionSpec{} }
func (m *CompactionSpec) String() string { return proto.CompactTextString(m) }
func (*CompactionSpec) ProtoMessage()    {}
func (*CompactionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_876b73a911678237, []int{2}
}
func (m *CompactionSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactionSpec.Unmarshal(m, b)
}
func (m *CompactionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactionSpec.Marshal(b, m, deterministic)
}
func (dst *CompactionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionSpec.Merge(dst, src)
}
func (m *CompactionSpec) XXX_Size() int {
	return xxx_messageInfo_CompactionSpec.Size(m)
}
func (m *CompactionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionSpec proto.InternalMessageInfo

func (m *CompactionSpec) GetDynamic() bool {
	if m != nil {
		return m.Dynamic
	}
	return false
}

func (m *CompactionSpec) GetFreeDiskBuffer() float64 {
	if m != nil {
		return m.FreeDiskBuffer
	}
	return 0
}

func init() {
	proto.RegisterType((*LogProtocol)(nil), "atomix.protocols.log.LogProtocol")
	proto.RegisterType((*StorageSpec)(nil), "atomix.protocols.log.StorageSpec")
	proto.RegisterType((*CompactionSpec)(nil), "atomix.protocols.log.CompactionSpec")
	proto.RegisterEnum("atomix.protocols.log.StorageLevel", StorageLevel_name, StorageLevel_value)
	proto.RegisterEnum("atomix.protocols.log.MemberGroupStrategy", MemberGroupStrategy_name, MemberGroupStrategy_value)
}

func init() { proto.RegisterFile("atomix/protocols/log/log.proto", fileDescriptor_log_876b73a911678237) }

var fileDescriptor_log_876b73a911678237 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x51, 0x6b, 0xdb, 0x30,
	0x14, 0x85, 0xab, 0xac, 0x6b, 0xc3, 0x4d, 0xea, 0x05, 0x75, 0x03, 0x3f, 0x8d, 0xd4, 0x84, 0xe1,
	0xf5, 0xc1, 0x85, 0xec, 0x65, 0xb0, 0x27, 0x2f, 0x36, 0xdb, 0x68, 0xbb, 0x04, 0xb9, 0x30, 0x18,
	0x0c, 0xe1, 0xb8, 0xb2, 0x27, 0x6a, 0x59, 0x46, 0x52, 0x46, 0xd2, 0x5f, 0xb6, 0x7f, 0xb5, 0xbf,
	0x30, 0x2c, 0xbb, 0x25, 0x63, 0xa6, 0x0f, 0x7e, 0x38, 0xdf, 0x3d, 0xe7, 0x72, 0xae, 0x05, 0xaf,
	0x53, 0x23, 0x05, 0xdf, 0x5e, 0xd4, 0x4a, 0x1a, 0x99, 0xc9, 0x52, 0x5f, 0x94, 0xb2, 0x68, 0xbe,
	0xc0, 0x12, 0xfc, 0xb2, 0x9d, 0x07, 0x8f, 0xf3, 0xa0, 0x94, 0x85, 0xf7, 0x07, 0xc1, 0xe8, 0x4a,
	0x16, 0xab, 0x0e, 0xe2, 0x1f, 0xf0, 0x4a, 0x30, 0xb1, 0x66, 0x8a, 0x16, 0x4a, 0x6e, 0x6a, 0xaa,
	0x8d, 0x4a, 0x0d, 0x2b, 0x76, 0x2e, 0x9a, 0x22, 0xdf, 0x99, 0xbf, 0x0d, 0xfa, 0xb6, 0x04, 0xd7,
	0x36, 0xf2, 0xa9, 0x49, 0x24, 0x5d, 0x80, 0x9c, 0x8a, 0xff, 0x21, 0xfe, 0x00, 0xc7, 0xda, 0x48,
	0x95, 0x16, 0xcc, 0x1d, 0x4c, 0x91, 0x3f, 0x9a, 0x9f, 0xf5, 0x2f, 0x4c, 0x5a, 0x53, 0x52, 0xb3,
	0x8c, 0x3c, 0x24, 0x70, 0x04, 0x90, 0x49, 0x51, 0xa7, 0x99, 0xe1, 0xb2, 0x72, 0x9f, 0xd9, 0xfc,
	0xac, 0x3f, 0xbf, 0x78, 0xf4, 0xd9, 0x15, 0x7b, 0x39, 0xef, 0x37, 0x82, 0xd1, 0xde, 0x7a, 0x3c,
	0x03, 0x47, 0xa4, 0x5b, 0xca, 0x2a, 0xa3, 0x76, 0x54, 0xf3, 0x7b, 0x66, 0x4f, 0x3d, 0x21, 0x63,
	0x91, 0x6e, 0xe3, 0x06, 0x26, 0xfc, 0x9e, 0xe1, 0x33, 0x18, 0x6b, 0x56, 0x08, 0x56, 0x99, 0xd6,
	0x33, 0xb0, 0x9e, 0x51, 0xc7, 0xac, 0xe5, 0x3d, 0x3c, 0x2f, 0xd9, 0x2f, 0x56, 0xda, 0x66, 0xce,
	0xdc, 0x7b, 0xf2, 0xb2, 0xab, 0xc6, 0x49, 0xda, 0x00, 0x7e, 0x03, 0x2f, 0xf2, 0x72, 0xa3, 0x7f,
	0x52, 0x59, 0xd1, 0x4c, 0x0a, 0xc1, 0x8d, 0x7b, 0x38, 0x45, 0xfe, 0x90, 0x9c, 0x58, 0xbc, 0xac,
	0x16, 0x16, 0x7a, 0x37, 0xe0, 0xfc, 0x7b, 0x18, 0x76, 0xe1, 0xf8, 0x76, 0x57, 0xa5, 0x82, 0x67,
	0xb6, 0xf5, 0x90, 0x3c, 0x48, 0xec, 0xc3, 0x24, 0x57, 0x8c, 0xd1, 0x5b, 0xae, 0xef, 0xe8, 0x7a,
	0x93, 0xe7, 0x4c, 0xd9, 0xd2, 0x88, 0x38, 0x0d, 0x8f, 0xb8, 0xbe, 0xfb, 0x68, 0xe9, 0xf9, 0x0c,
	0xc6, 0xfb, 0xa5, 0xf0, 0x10, 0x0e, 0xa3, 0x2f, 0xc9, 0xe5, 0xe4, 0x00, 0x03, 0x1c, 0x5d, 0x87,
	0xab, 0x55, 0x1c, 0x4d, 0xd0, 0x79, 0x0c, 0xa7, 0x3d, 0xaf, 0x8c, 0x1d, 0x80, 0xcf, 0xcb, 0xe4,
	0x86, 0x86, 0xdf, 0x42, 0x12, 0x4f, 0x0e, 0x1a, 0x4d, 0xc2, 0xc5, 0x65, 0xa7, 0x51, 0xa3, 0xbf,
	0x2f, 0xbf, 0xc6, 0x9d, 0x1e, 0xac, 0x8f, 0xec, 0xdf, 0x78, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xce, 0x88, 0x3e, 0x1f, 0xae, 0x02, 0x00, 0x00,
}
