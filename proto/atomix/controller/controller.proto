syntax = "proto3";

package atomix.controller;

import "google/protobuf/any.proto";
import "atomix/controller/partition.proto";

// Gets a list of partition groups in the given namespace
message GetPartitionGroupsRequest {
    atomix.controller.PartitionGroupId id = 1;
}

// Returns a list of partition groups
message GetPartitionGroupsResponse {
    repeated atomix.controller.PartitionGroup groups = 1;
}

// Creates a new partition group
message CreatePartitionGroupRequest {
    atomix.controller.PartitionGroupId id = 1;
    atomix.controller.PartitionGroupSpec spec = 2;
}

// Returns the status of a partition group
message CreatePartitionGroupResponse {

}

// Deletes a partition group
message DeletePartitionGroupRequest {
    atomix.controller.PartitionGroupId id = 1;
}

// Returns the result of deleting a partition group
message DeletePartitionGroupResponse {

}

// Enters a primary election
message PartitionElectionRequest {
    atomix.controller.PartitionId partition_id = 1;
    string member = 2;
}

// Enter response
message PartitionElectionResponse {
    PrimaryTerm term = 1;
}

// Primary term
message PrimaryTerm {
    int64 term = 1;
    string primary = 2;
    repeated string candidates = 3;
}

// Atomix controller service
service ControllerService {

    // Creates a partition group
    rpc CreatePartitionGroup(CreatePartitionGroupRequest) returns (CreatePartitionGroupResponse) {}

    // Deletes a partition group
    rpc DeletePartitionGroup(DeletePartitionGroupRequest) returns (DeletePartitionGroupResponse) {}

    // Gets a list of active partition groups
    rpc GetPartitionGroups(GetPartitionGroupsRequest) returns (GetPartitionGroupsResponse) {}

    // Enters a primary election for a specific partition
    rpc EnterElection(PartitionElectionRequest) returns (stream PartitionElectionResponse) {}

}
