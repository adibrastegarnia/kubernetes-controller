syntax = "proto3";

package atomix.partition;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

option java_package = "io.atomix.api.partition";
option java_multiple_files = true;

// Partition identifier
message PartitionId {
    int32 partition = 1;
    string group = 2;
}

// Partition group info
message PartitionGroup {
    string name = 1;
    PartitionGroupSpec spec = 2;
    repeated Partition partitions = 3;
}

// Partition info
message Partition {
    int32 partition_id = 1;
    repeated PartitionEndpoint endpoints = 2;
}

// Partition endpoint
message PartitionEndpoint {
    string host = 2;
    int32 port = 3;
}

// Partition group specification
message PartitionGroupSpec {
    string name = 1;
    uint32 replicas = 2;
    uint32 partitions = 3;
    uint32 partition_size = 4;
    oneof group {
        RaftPartitionGroup raft = 5;
        PrimaryBackupPartitionGroup primary_backup = 6;
        DistributedLogPartitionGroup log = 7;
    }
}

// Raft partition group spec
message RaftPartitionGroup {
    google.protobuf.Duration election_timeout = 1;
    google.protobuf.Duration heartbeat_interval = 2;
    StorageSpec storage = 3;
    CompactionSpec compaction = 4;
}

// Primary-backup partition group spec
message PrimaryBackupPartitionGroup {
    MemberGroupStrategy member_group_strategy = 1;
}

// Log partition group spec
message DistributedLogPartitionGroup {
    MemberGroupStrategy member_group_strategy = 1;
    StorageSpec storage = 2;
    CompactionSpec compaction = 3;
}

// Partition group storage configuration
message StorageSpec {
    uint32 max_entry_size = 1;
    uint32 segment_size = 2;
    StorageLevel level = 3;
    bool flush_on_commit = 4;
}

// Storage level
enum StorageLevel {
    DISK = 0;
    MAPPED = 1;
}

// Partition group compaction configuration
message CompactionSpec {
    bool dynamic = 1;
    double free_disk_buffer = 2;
}

// Member group strategy
enum MemberGroupStrategy {
    HOST_AWARE = 0;
    RACK_AWARE = 1;
    ZONE_AWARE = 2;
}
